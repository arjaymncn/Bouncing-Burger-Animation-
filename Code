import tkinter as tk
from PIL import Image, ImageTk
import random
import time

# --- CONFIGURABLES ---
IMAGE_FILE = 'burger ka sakin.jfif'  # Burger image filename
NAME = 'ARJAY MANUCAN'    # Name to display in all caps
FPS = 60                   # Frames per second
SPEED = 5                  # Pixels per frame
STAR_COUNT = 100           # Number of stars in space background

class Star:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.reset()
        self.twinkle_timer = random.randint(0, 30)

    def reset(self):
        self.x = random.randint(0, self.width)
        self.y = random.randint(0, self.height)
        self.size = random.randint(1, 3)
        self.brightness = random.randint(100, 255)

    def twinkle(self):
        self.twinkle_timer += 1
        if self.twinkle_timer > 30:
            self.brightness = random.randint(100, 255)
            self.twinkle_timer = 0

class BouncingBurgerApp:
    def __init__(self, root):
        self.root = root
        self.root.title('Bouncing Burger - Arjay Manucan')
        self.paused = False

        # Canvas size (fixed 800x600)
        self.canvas_width = 800
        self.canvas_height = 600
        self.canvas = tk.Canvas(root, width=self.canvas_width, height=self.canvas_height, bg='#0a0a2a')
        self.canvas.pack()

        # Load and resize image to 50% of original size (bigger)
        self.img = Image.open(IMAGE_FILE).convert('RGBA')
        # Remove white background (make white pixels transparent)
        datas = self.img.getdata()
        newData = []
        for item in datas:
            # Detect white-ish pixels
            if item[0] > 240 and item[1] > 240 and item[2] > 240:
                newData.append((255, 255, 255, 0))  # Transparent
            else:
                newData.append(item)
        self.img.putdata(newData)
        new_size = (self.img.width // 2, self.img.height // 2)  # Changed from // 4 to // 2
        self.img = self.img.resize(new_size, Image.LANCZOS)
        self.tk_img = ImageTk.PhotoImage(self.img)
        self.img_width, self.img_height = self.img.size

        # Initial position and velocity
        self.x = random.randint(0, self.canvas_width - self.img_width)
        self.y = random.randint(0, self.canvas_height - self.img_height)
        self.dx = SPEED
        self.dy = SPEED

        # Draw image and text
        self.image_id = self.canvas.create_image(self.x, self.y, anchor='nw', image=self.tk_img)
        self.text_color = self.random_color()
        self.text_id = self.canvas.create_text(
            self.x + self.img_width // 2,
            self.y + self.img_height // 2,
            text=NAME,
            fill=self.text_color,
            font=('Arial', max(14, self.img_width // 10), 'bold'),
            anchor='center',
            justify='center',
        )

        # Space theme - stars only
        self.stars = [Star(self.canvas_width, self.canvas_height) for _ in range(STAR_COUNT)]
        self.star_ids = []

        # Bind spacebar
        self.root.bind('<space>', self.toggle_pause)

        # Start animation
        self.animate()

    def random_color(self):
        return '#{:06x}'.format(random.randint(0, 0xFFFFFF))

    def animate(self):
        if not self.paused:
            self.update_space_background()
            self.move_burger()
        self.root.after(int(1000 / FPS), self.animate)

    def update_space_background(self):
        # Remove old stars
        for sid in self.star_ids:
            self.canvas.delete(sid)
        self.star_ids.clear()
        
        # Draw and update stars
        for star in self.stars:
            star.twinkle()
            # Create twinkling effect with different brightness
            color = f'#{star.brightness:02x}{star.brightness:02x}ff'
            sid = self.canvas.create_oval(
                star.x, star.y, star.x + star.size, star.y + star.size,
                fill=color, outline=color
            )
            self.star_ids.append(sid)

    def move_burger(self):
        # Move position
        self.x += self.dx
        self.y += self.dy
        bounced = False

        # Bounce on edges
        if self.x <= 0 or self.x + self.img_width >= self.canvas_width:
            self.dx = -self.dx
            bounced = True
            self.x = max(0, min(self.x, self.canvas_width - self.img_width))
        if self.y <= 0 or self.y + self.img_height >= self.canvas_height:
            self.dy = -self.dy
            bounced = True
            self.y = max(0, min(self.y, self.canvas_height - self.img_height))

        # Move image and text
        self.canvas.coords(self.image_id, self.x, self.y)
        self.canvas.coords(
            self.text_id,
            self.x + self.img_width // 2,
            self.y + self.img_height // 2
        )

        # Change text color on bounce
        if bounced:
            self.text_color = self.random_color()
            self.canvas.itemconfig(self.text_id, fill=self.text_color)

    def toggle_pause(self, event=None):
        self.paused = not self.paused

if __name__ == '__main__':
    root = tk.Tk()
    app = BouncingBurgerApp(root)
    root.mainloop() 
